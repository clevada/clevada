<?php

/**
 * Clevada - Content Management System and Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://clevada.com.
 *
 * LICENSE:
 * Clevada is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2021, Chimilevschi Iosif Gabriel, https://clevada.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <contact@clevada.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

 
namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use App\Models\DriveFile;
use Storage;
use Image;
use File;
use Auth;

class Upload extends Model
{

    /**
     * Upload an image to the server. If the upload is successful, it returns the object of the new file.
     * 
     * @return object|null The object of uploaded image or null if the upload fails
     */

    //public static function storeImage($request, $filename, $width = 1200, $height = 800, $oldImagePath = null)
    public static function storeImage($requestFile, $oldImageCode = null, $data = null)
    {
        if (!$requestFile) return false;

        $uploadSuccessful = false;
        $newImagePath = null;
        $width = 1250; // max file width
        $height = 900; // max file height

        /*
        $item_id = topic_id (forum) / post_id (posts)
        $extra_item_id = post_id (forum) 
        */
        if ($data) {
            if ($data['module'] ?? null) $module = $data['module'];
            if ($data['item_id'] ?? null) $item_id = $data['item_id'];
            if ($data['extra_item_id'] ?? null) $extra_item_id = $data['extra_item_id'];
        }

        $extension = strtolower($requestFile->getClientOriginalExtension());

        // List of allowed file extensions       
        $validExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'];

        if (in_array($extension, $validExtensions)) {
            $originalNameRaw = $requestFile->getClientOriginalName();
            $originalName =  str_replace(' ', '_', $originalNameRaw);

            $newFilename = Str::random(12) . '-' . Str::slug(pathinfo($originalName, PATHINFO_FILENAME)) . '.' . $extension;
            $subfolder = now()->format('Ym');

            // Create the directory if it does not exist
            $path = 'uploads/' . $subfolder;
            if (!File::isDirectory($path)) {
                File::makeDirectory($path, 0777, true, true);
            }

            // Save different image variants (main, thumbnail, square, rectangle)
            $pathLarge = "$path/$newFilename";
            $pathThumb = "$path/thumb_$newFilename";
            $pathThumbSquare = "$path/thumb_square_$newFilename";
            $pathThumbRectangle = "$path/thumb_rectangle_$newFilename";

            // Saving the main image with a maintained aspect ratio
            Image::read($requestFile)->resize($width, $height, function ($constraint) {
                $constraint->aspectRatio();
                $constraint->upsize();
            })->save($pathLarge);

            // Save a thumbnail version of the image
            Image::read($requestFile)->resize(600, 600, function ($constraint) {
                $constraint->aspectRatio();
                $constraint->upsize();
            })->save($pathThumb);

            // Save a square version of the image
            Image::read($requestFile)->cover(450, 450, $position = 'center')->save($pathThumbSquare);

            // Save a rectangle version of the image
            Image::read($requestFile)->cover(600, 400, $position = 'center')->save($pathThumbRectangle);

            $uploadSuccessful = true;
            $newImagePath = $subfolder . '/' . $newFilename;


            // Add image to drive table
            $fileCode = Str::random(36);
            $fileMime = Storage::mimeType($newImagePath);

            $filesize_large = filesize($pathLarge); // in bytes            
            $filesize_thumb = filesize($pathThumb); // in bytes            
            $filesize_square = filesize($pathThumbSquare); // in bytes            
            $filesize_rectangle = filesize($pathThumbRectangle); // in bytes         
            $filesize = round(($filesize_large + $filesize_thumb + $filesize_square + $filesize_rectangle) / 1024 / 1024, 4); // megabytes with 4 digits.   

            $file = DriveFile::create([
                'code' => $fileCode,
                'file' => $newImagePath,
                'created_by_user_id' => Auth::user()->id ?? null,
                'mime_type' => $fileMime,
                'extension' => $extension,
                'size_mb' => $filesize, // !!! Size is the total of the sizes of 3 images (large + thumb + thumb square)   
                'original_name' => $originalNameRaw,
                'module' => $module ?? null,
                'item_id' => $item_id ?? null,
                'extra_item_id' => $extra_item_id ?? null,
            ]);
        }


        // DELETE OLD IMAGE
        if ($uploadSuccessful && $oldImageCode) {

            $oldFile = DriveFile::where('code', $oldImageCode)->first();
            if ($oldFile) {

                // delete large image
                $fullPath = getcwd() . '/uploads/' . $oldFile->file;
                if (File::exists($fullPath)) File::delete($fullPath);

                // Additionally delete the thumbnail and square images
                $pathInfo = pathinfo($fullPath);
                $pathThumb = "{$pathInfo['dirname']}/thumb_{$pathInfo['basename']}";
                $pathThumbSquare = "{$pathInfo['dirname']}/thumb_square_{$pathInfo['basename']}";
                $pathThumbRectangle = "{$pathInfo['dirname']}/thumb_rectangle_{$pathInfo['basename']}";

                if (File::exists($pathThumb)) File::delete($pathThumb);
                if (File::exists($pathThumbSquare)) File::delete($pathThumbSquare);
                if (File::exists($pathThumbRectangle)) File::delete($pathThumbRectangle);

                DriveFile::where('code', $oldImageCode)->delete();
            }
        }

        return $file;
    }



    /**
     * Handles the creation of a user avatar.
     *
     * @param  \Illuminate\Http\UploadedFile|null $requestFile The uploaded file.
     * @param  int|null $userId The ID of the user. If null, the ID of the currently authenticated user is used.
     * @return string|null The path of the uploaded image or null if the upload fails
     */
    public static function createAvatar($requestFile, $userId = null)
    {
        if (!$requestFile) return false;

        $extension = strtolower($requestFile->getClientOriginalExtension());

        // List of allowed file extensions
        $validExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'];

        if (!in_array($extension, $validExtensions)) return false;

        if (is_null($userId)) {
            $userId = Auth::id();
            if (is_null($userId)) return false;
        }

        $user = User::findOrFail($userId);

        $currentAvatar = $user->avatar;

        $currentAvatarPath = getcwd() . '/uploads/avatars/' . $currentAvatar;
        $currentAvatarThumbPath = getcwd() . '/uploads/avatars/thumb_' . $currentAvatar;

        $originalName = pathinfo($requestFile->getClientOriginalName(), PATHINFO_FILENAME); // Get the name without the extension
        $extension = $requestFile->extension(); // Get file extension
        $newFilename = Str::random(12) . '-' . Str::slug($originalName, '-') . '.' . $extension;

        $path =  getcwd() . '/uploads/avatars/';
        if (!file_exists($path)) {
            mkdir($path, 0777, true);
        }

        $pathThumb = "$path/thumb_";
        Image::read($requestFile)->cover(350, 350, $position = 'center')->save($path . $newFilename); // large avatar
        Image::read($requestFile)->cover(64, 64, $position = 'center')->save($pathThumb . $newFilename); // Thumb avatar

        $user->update(['avatar' => $newFilename]);

        if ($currentAvatar && $currentAvatar !== $newFilename && file_exists($currentAvatarPath)) {
            @unlink($currentAvatarPath);
            @unlink($currentAvatarThumbPath);
        }

        return $newFilename;
    }



    /**
     * Upload and store a file.
     *
     * @return string|null The path of the uploaded file or null if the upload fails
     */
    /*
    public static function storeFile($requestFile)
    {
        if (!$requestFile) return false;

        $originalname = $requestFile->getClientOriginalName();
        $originalname =  str_replace(' ', '_', $originalname);
        $new_filename = Str::random(16) . '-' . $originalname;

        $subfolder = now()->format('Ym');

        // Create the directory if it does not exist
        $path = 'uploads/' . $subfolder;
        if (!File::isDirectory($path)) {
            File::makeDirectory($path, 0777, true, true);
        }

        $filePath = $path . '/' . $new_filename;
        move_uploaded_file($requestFile, $filePath);

        return $subfolder . '/' . $new_filename;
    }
    */

    /**
     * Upload and store a file.
     *
     * @return object|null The object of the uploaded file or null if the upload fails
     */
    public static function storeFile($requestFile)
    {
        if (!$requestFile) return false;

        $originalname = $requestFile->getClientOriginalName();
        $originalname =  str_replace(' ', '_', $originalname);
        $new_filename = Str::random(16) . '-' . $originalname;

        $subfolder = now()->format('Ym');

        // Create the directory if it does not exist
        $path = 'uploads/' . $subfolder;
        if (!File::isDirectory($path)) {
            File::makeDirectory($path, 0777, true, true);
        }

        $filePath = $path . '/' . $new_filename;
        move_uploaded_file($requestFile, $filePath);
        $newFile = $subfolder . '/' . $new_filename;

        $extension = pathinfo($newFile, PATHINFO_EXTENSION);

        $location = getcwd() . '/uploads/' . $newFile;
        $filesize = filesize($location); // in bytes            
        $filesize = round($filesize / 1024 / 1024, 4); // megabytes with 4 digits

        $fileCode = Str::random(36);

        $extension = $requestFile->getClientOriginalExtension();
        $fileMime = Storage::mimeType($newFile);

        $file = DriveFile::create([
            'code' => $fileCode,
            'file' => $newFile,
            'created_by_user_id' => Auth::user()->id,
            'mime_type' => $fileMime,
            'extension' => $extension,
            'size_mb' => $filesize,
            'original_name' => $originalname,
        ]);

        return $file;
    }
}
