<?php

/**
 * Clevada - Content Management System and Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://clevada.com.
 *
 * LICENSE:
 * Clevada is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2021, Chimilevschi Iosif Gabriel, https://clevada.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <contact@clevada.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

 
namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use App\Models\BlockContent;
use App\Models\PostLike;
use App\Models\PostComment;

class Post extends Model
{

    protected $fillable = [
        'type',
        'title',
        'slug',
        'image',
        'user_id',
        'status',
        'summary',
        'content',
        'tags',
        'featured',
        'hits',
        'minutes_to_read',
        'like_count',
        'comment_count',
        'search_terms',
        'blocks',
        'cf_array',
        'cf_array_display'
    ];

    protected $table = 'posts';

    protected $appends = ['url'];

    public function author()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function getUrlAttribute()
    {
        if ($this->lang_id == default_lang()->id)
            $post_url = route('post', ['categ_slug' => $this->category->slug, 'slug' => $this->slug]);
        else {
            $lang = SysLang::where('id', $this->lang_id)->first();
            $post_url = route('post', ['categ_slug' => $this->category->slug, 'slug' => $this->slug, 'lang' => $lang->code]);
        }

        return $post_url;
    }

        
    public function comments()
    {
        return $this->hasMany(PostComment::class, 'post_id');
    }

    public function blocks()
    {
        return $this->hasMany(BlockContent::class, 'post_id');
    }
    public function likes()
    {
        return $this->hasMany(PostLike::class, 'post_id');
    }

    public static function estimated_reading_time($post_id)
    {
        $post = Post::find($post_id);
        if (!$post) return null;

        $words = 0;

        if (!$post->blocks) return 1;

        $blocks = unserialize($post->blocks);

        foreach ($blocks as $block) {
            if ($block['type'] == 'editor' || $block['type'] == 'accordion' || $block['type'] == 'text') {
                $block_content = Block::where('id', $block['id'])->value('content');

                if ($block_content ?? null) {
                    if ($block['type'] == 'text' || $block['type'] == 'accordion')
                        $block_data = $block_content;
                    else
                        $block_data = @unserialize($block_content);

                    if ($block_data !== false)
                        $words_block = str_word_count(strip_tags($block_data));
                    else
                        $words_block = str_word_count(strip_tags($block_content));
                } else $words_block = 0;

                $words = $words + $words_block;
            }
        }

        $minutes = (int)($words / 120);
        $seconds = (int)($words % 120 / (120 / 60));

        if ($minutes < 1) $minutes = 1;

        return $minutes;
    }


    public static function recount_likes($post_id)
    {
        $counter = PostLike::where('post_id', $post_id)->count();

        Post::where('id', $post_id)->update(['likes' => $counter]);

        return;
    }


    public static function recount_comments($post_id)
    {
        $counter = PostComment::where('post_id', $post_id)->count();

        Post::where('id', $post_id)->update(['comments' => $counter]);

        return;
    }
}
